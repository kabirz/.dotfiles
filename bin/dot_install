#!/usr/bin/env python3

import argparse
import os
import shutil
import subprocess
from pathlib import Path
from urllib import request

CUR_PATH = Path(__file__).parent.parent
HOME_PATH = Path(os.environ['HOME'])
CFG_PATH = HOME_PATH / '.config'


def download_file(url: str, output_path: str):
    def reporthook(blocknum, blocksize, totalsize):
        downloaded = blocknum * blocksize
        if totalsize > 0:
            percent = downloaded * 100 / totalsize
            bar_length = 50
            filled_length = int(bar_length * percent / 100)
            percent = int(percent)
            bar = '#' * filled_length + '-' * (bar_length - filled_length)
            print(f'[{bar}] {percent}%  {downloaded / 2**20:.02f}MB/{totalsize / 2**20:.02f}MB', end='\r')
        else:
            print(f'Downloaded: {downloaded} bytes', end='\r')

    print(f'Downloading {url} ...')
    request.urlretrieve(url, output_path, reporthook)
    print('\nDownload complete!')


def create_link(dst_path: Path, src: str):
    if dst_path.is_symlink() or dst_path.is_file():
        os.unlink(dst_path)
    else:
        shutil.rmtree(dst_path, ignore_errors=True)
    os.symlink(CUR_PATH / src, dst_path)


def zellij_install(dst_path: Path, src: str):
    create_link(dst_path, src)
    zjstatus_file = CUR_PATH / src / 'zjstatus.wasm'
    if not zjstatus_file.exists():
        url = 'https://github.com/dj95/zjstatus/releases/latest/download/zjstatus.wasm'
        download_file(url, zjstatus_file.as_posix())


def tmux_install(dst_path: Path, src: str):
    create_link(dst_path, src)
    git_path = HOME_PATH / '.tmux/plugins/tpm'
    if not git_path.exists():
        url = 'https://github.com/tmux-plugins/tpm'
        cmds = ['git', 'clone', url, git_path]
        subprocess.call(cmds)


def zim_install(zimfw: str, _cmd: str):
    ZIM_ROOT_PATH = HOME_PATH / '.zim'
    if ZIM_ROOT_PATH.exists():
        shutil.rmtree(ZIM_ROOT_PATH, ignore_errors=True)
    ZIM_ROOT_PATH.mkdir(parents=True, exist_ok=True)
    ZIM_FW = ZIM_ROOT_PATH / 'zimfw.zsh'
    url = 'https://raw.githubusercontent.com/zimfw/zimfw/refs/heads/master/zimfw.zsh'
    download_file(url, ZIM_FW.as_posix())
    create_link(HOME_PATH / '.zshenv', f'{zimfw}/zshenv')
    create_link(HOME_PATH / '.zlogin', f'{zimfw}/zlogin')
    create_link(HOME_PATH / '.zimrc', f'{zimfw}/zimrc')
    old_path = os.getcwd()
    os.chdir(HOME_PATH)
    cmds = ['zsh', '.zim/zimfw.zsh', 'install']
    subprocess.call(cmds)
    ZSHRC = HOME_PATH / '.zshrc'
    ZSHRC_ZIM = CUR_PATH / zimfw / 'zshrc'
    os.chdir(old_path)
    if ZSHRC.exists():
        with ZSHRC.open('r+') as f:
            for line in f:
                if line.startswith(f'source {ZSHRC_ZIM}'):
                    break
            else:
                f.write(f'source {ZSHRC_ZIM}\n')
    else:
        ZSHRC.write_text(f'source {ZSHRC_ZIM}\n')


def clangd_install(name: str, _cmd: str):
    clangd_cfg = HOME_PATH / name
    clangd_cfg.write_text('CompileFlags:\n  Remove: -mabi=lp64')


def main():
    pkgs = {
        'nvim': (create_link, (CFG_PATH / 'nvim', 'nvim_user')),
        'gitconfig': (create_link, (HOME_PATH / '.gitconfig', '.gitconfig')),
        'cargo': (create_link, (HOME_PATH / '.cargo/config.toml', '.cargo_config.toml')),
        'ruff': (create_link, (HOME_PATH / 'ruff.toml', 'ruff.toml')),
        'gitui': (create_link, (CFG_PATH / 'gitui', 'gitui')),
        'starship': (create_link, (CFG_PATH / 'starship.toml', 'starship.toml')),
        'joshuto': (create_link, (CFG_PATH / 'joshuto', 'joshuto')),
        'alacritty': (create_link, (CFG_PATH / 'alacritty', 'alacritty')),
        'neofetch': (create_link, (CFG_PATH / 'neofetch', 'neofetch')),
        'zellij': (zellij_install, (CFG_PATH / 'zellij', 'zellij')),
        'tmux': (tmux_install, (HOME_PATH / '.tmux.conf', '.tmux.conf')),
        'zim': (zim_install, ('zsh', '')),
        'clangd': (clangd_install, ('.clangd', '')),
        'all': (),
    }
    parser = argparse.ArgumentParser(description='tool for install dotfile')
    parser.add_argument('package', choices=pkgs.keys(), help='install spec package')

    args = parser.parse_args()
    if args.package != 'all':
        cmds = pkgs[args.package]
        cmds[0](*cmds[1])
    else:
        for cmd_name, cmds in pkgs.items():
            if cmd_name != 'all':
                cmds[0](*cmds[1])


if __name__ == '__main__':
    main()
